openapi: 3.0.0
info:
  title: Jobio API
  version: 1.0.0
  description: User authentication and job CRUD API secured with JWT

servers:
  - url: https://jobio-production.up.railway.app/api/v1

tags:
  - name: Auth
    description: Endpoints for user authentication (login, register)
  - name: Jobs
    description: Endpoints for managing jobs
    
security:
  - bearerAuth: []

paths:
  /auth/register:
    post:
      tags: 
        - Auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input

  /auth/login:
    post:
      tags: 
        - Auth
      summary: Log in an existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Unauthorized

  /jobs:
    get:
      tags: 
        - Jobs
      summary: Get all jobs
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
    post:
      tags: 
        - Jobs
      summary: Create a new job
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobRequest'
      responses:
        '201':
          description: Job created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'

  /jobs/{id}:
    get:
      tags: 
        - Jobs
      summary: Get a single job by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Job found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '404':
          description: Job not found

    patch:
      tags: 
        - Jobs
      summary: Update a job by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobRequest'
      responses:
        '200':
          description: Job updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'

    delete:
      tags: 
        - Jobs
      summary: Delete a job by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Job deleted successfully
        '404':
          description: Job not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterRequest:
      type: object
      required: [name, email, password]
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    AuthResponse:
      type: object
      properties:
        status:
          type: string
          description: fail/success
        user:
          type: object
          description: returned user
        token:
          type: string
          description: JWT token

    JobRequest:
      type: object
      required: [company,position, status, user]
      properties:
        company:
          type: string
        position:
          type: string
        status:
          type: string
        user:
          type: string

    Job:
      type: object
      properties:
        id:
          type: string
        position:
          type: string
        company:
          type: string
        status:
          type: string
        user:
          type: string
        createdAt:
          type: string
          format: date-time